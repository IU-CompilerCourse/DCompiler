STATEMENTS
	DECLARATIONS (with values)
		DECLARATIONS
			IDENT (with value)
				IDENT Token{type: Identifier, lexeme: 'arr', literal: null, line: 1}
				ARRAY
					EXPRESSIONS
						LOGICAL EXPRESSION
							LEFT
								LITERAL
									Token{type: BooleanLiteral, lexeme: 'true', literal: true, line: 1}
							Token{type: And, lexeme: 'and', literal: null, line: 1}
							RIGHT
								LITERAL
									Token{type: BooleanLiteral, lexeme: 'true', literal: true, line: 1}
						BINARY EXPRESSION
							LEFT
								LITERAL
									Token{type: StringLiteral, lexeme: '"2"', literal: 2, line: 1}
							Token{type: Plus, lexeme: '+', literal: null, line: 1}
							RIGHT
								LITERAL
									Token{type: StringLiteral, lexeme: '"3"', literal: 3, line: 1}
						BINARY EXPRESSION
							LEFT
								LITERAL
									Token{type: IntLiteral, lexeme: '3', literal: 3, line: 1}
							Token{type: Star, lexeme: '*', literal: null, line: 1}
							RIGHT
								LITERAL
									Token{type: IntLiteral, lexeme: '8', literal: 8, line: 1}
						COMPARISON
							LEFT
								BINARY EXPRESSION
									LEFT
										UNARY EXPRESSION
											BINARY EXPRESSION
												LEFT
													BINARY EXPRESSION
														LEFT
															LITERAL
																Token{type: IntLiteral, lexeme: '25', literal: 25, line: 1}
														Token{type: Plus, lexeme: '+', literal: null, line: 1}
														RIGHT
															LITERAL
																Token{type: IntLiteral, lexeme: '32', literal: 32, line: 1}
												Token{type: Minus, lexeme: '-', literal: null, line: 1}
												RIGHT
													LITERAL
														Token{type: IntLiteral, lexeme: '48', literal: 48, line: 1}
									Token{type: Star, lexeme: '*', literal: null, line: 1}
									RIGHT
										LITERAL
											Token{type: IntLiteral, lexeme: '0', literal: 0, line: 1}
							Token{type: Equal, lexeme: '=', literal: null, line: 1}
							RIGHT
								LITERAL
									Token{type: IntLiteral, lexeme: '0', literal: 0, line: 1}
	DECLARATIONS (with values)
		DECLARATIONS
			IDENT (with value)
				IDENT Token{type: Identifier, lexeme: 'temp', literal: null, line: 2}
				REFERENCE TAIL
					IDENT Token{type: Identifier, lexeme: 'arr', literal: null, line: 2}
					TAIL
						ARRAY ACCESS
							BINARY EXPRESSION
								LEFT
									LITERAL
										Token{type: IntLiteral, lexeme: '1', literal: 1, line: 2}
								Token{type: Plus, lexeme: '+', literal: null, line: 2}
								RIGHT
									LITERAL
										Token{type: IntLiteral, lexeme: '5', literal: 5, line: 2}

ContextCheckerVisitor:

