Statements {
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'endlessRecursion', literal: null, line: 1}
    Function literal {
     Identifiers {
      Token{type: Identifier, lexeme: 'x', literal: null, line: 1}
     }
     Statements {
      Expression statement {
       Reference Tail {
        Identifier Token{type: Identifier, lexeme: 'endlessRecursion', literal: null, line: 2}
        Tail {
         Function call {
          Expressions {
           Binary Operation {
            Left {
             Reference Tail {
              Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 2}
              Empty Tail {
              }
             }
            }
            Token{type: Minus, lexeme: '-', literal: null, line: 2}
            Right {
             Literal {
              Token{type: IntLiteral, lexeme: '1', literal: 1, line: 2}
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 Expression statement {
  Reference Tail {
   Identifier Token{type: Identifier, lexeme: 'endlessRecursion', literal: null, line: 5}
   Tail {
    Function call {
     Expressions {
      Literal {
       Token{type: IntLiteral, lexeme: '10', literal: 10, line: 5}
      }
     }
    }
   }
  }
 }
}
