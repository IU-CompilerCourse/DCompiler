Statements {
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'arr', literal: null, line: 1}
    Array {
     Expressions {
      Literal {
       Token{type: IntLiteral, lexeme: '1', literal: 1, line: 1}
      }
      Literal {
       Token{type: IntLiteral, lexeme: '2', literal: 2, line: 1}
      }
      Literal {
       Token{type: IntLiteral, lexeme: '3', literal: 3, line: 1}
      }
     }
    }
   }
  }
 }
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'tup', literal: null, line: 2}
    Tuple {
     Tuple list {
      Named element {
       Token{type: Identifier, lexeme: 'a', literal: null, line: 2}
       Literal {
        Token{type: IntLiteral, lexeme: '5', literal: 5, line: 2}
       }
      }
      Named element {
       Token{type: Identifier, lexeme: 'b', literal: null, line: 2}
       Literal {
        Token{type: StringLiteral, lexeme: '"test"', literal: test, line: 2}
       }
      }
     }
    }
   }
  }
 }
 Reference Assign {
  Identifier Token{type: Identifier, lexeme: 'arr', literal: null, line: 4}
  Literal {
   Token{type: IntLiteral, lexeme: '4', literal: 4, line: 4}
  }
  Tail {
   Array Access {
    Literal {
     Token{type: IntLiteral, lexeme: '4', literal: 4, line: 4}
    }
   }
  }
 }
 Assignment {
  Identifier Token{type: Identifier, lexeme: 'tup', literal: null, line: 5}
  Binary Operation {
   Left {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'tup', literal: null, line: 5}
     Empty Tail {
     }
    }
   }
   Token{type: Plus, lexeme: '+', literal: null, line: 5}
   Right {
    Tuple {
     Tuple list {
      Named element {
       Token{type: Identifier, lexeme: 'c', literal: null, line: 5}
       Literal {
        Token{type: BooleanLiteral, lexeme: 'true', literal: true, line: 5}
       }
      }
     }
    }
   }
  }
 }
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'val1', literal: null, line: 7}
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'arr', literal: null, line: 7}
     Tail {
      Array Access {
       Literal {
        Token{type: IntLiteral, lexeme: '4', literal: 4, line: 7}
       }
      }
     }
    }
   }
  }
 }
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'val2', literal: null, line: 8}
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'tup', literal: null, line: 8}
     Tail {
      Tuple Access {
       Token{type: Identifier, lexeme: 'c', literal: null, line: 8}
       null
      }
     }
    }
   }
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'val1', literal: null, line: 10}
    Empty Tail {
    }
   }
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'val2', literal: null, line: 10}
    Empty Tail {
    }
   }
  }
 }
}
