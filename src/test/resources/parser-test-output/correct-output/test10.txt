Statements {
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'num', literal: null, line: 1}
    Literal {
     Token{type: DoubleLiteral, lexeme: '3.14', literal: 3.14, line: 1}
    }
   }
  }
 }
 If {
  Comparison Operation {
   Left {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'num', literal: null, line: 3}
     Empty Tail {
     }
    }
   }
   Token{type: Greater, lexeme: '>', literal: null, line: 3}
   Right {
    Literal {
     Token{type: IntLiteral, lexeme: '0', literal: 0, line: 3}
    }
   }
  }
  Statements {
   Print {
    Expressions {
     Reference Tail {
      Identifier Token{type: Identifier, lexeme: 'num', literal: null, line: 4}
      Empty Tail {
      }
     }
     Literal {
      Token{type: StringLiteral, lexeme: '" is positive."', literal:  is positive., line: 4}
     }
    }
   }
  }
  Statements {
   Print {
    Expressions {
     Literal {
      Token{type: StringLiteral, lexeme: '"is zero"', literal: is zero, line: 6}
     }
    }
   }
  }
 }
}
