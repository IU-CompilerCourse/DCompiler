ListNode {
 Multiple Declarations {
  ListNode {
   Declaration {
    Token List {
     Token{type: Identifier, lexeme: 'x', literal: null, line: 1}
    }
    Literal {
     Token{type: IntLiteral, lexeme: '10', literal: 10, line: 1}
    }
   }
  }
 }
 Multiple Declarations {
  ListNode {
   Declaration {
    Token List {
     Token{type: Identifier, lexeme: 'y', literal: null, line: 2}
    }
    Literal {
     Token{type: IntLiteral, lexeme: '20', literal: 20, line: 2}
    }
   }
  }
 }
 If Statement {
  Binary Operation {
   Left {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 3}
    }
   }
   Token{type: Less, lexeme: '<', literal: null, line: 3}
   Right {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'y', literal: null, line: 3}
    }
   }
  }
  ListNode {
   Print {
    ListNode {
     Literal {
      Token{type: StringLiteral, lexeme: '"x is less than y"', literal: x is less than y, line: 4}
     }
    }
   }
  }
  ListNode {
   Print {
    ListNode {
     Literal {
      Token{type: StringLiteral, lexeme: '"x is not less than y"', literal: x is not less than y, line: 6}
     }
    }
   }
  }
 }
}
