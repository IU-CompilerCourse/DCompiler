Statements {
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'intVal', literal: null, line: 1}
    Literal {
     Token{type: IntLiteral, lexeme: '5', literal: 5, line: 1}
    }
   }
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'realVal', literal: null, line: 1}
    Literal {
     Token{type: DoubleLiteral, lexeme: '1.23', literal: 1.23, line: 1}
    }
   }
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'boolVal', literal: null, line: 1}
    Literal {
     Token{type: BooleanLiteral, lexeme: 'true', literal: true, line: 1}
    }
   }
  }
 }
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'stringVal', literal: null, line: 2}
    Literal {
     Token{type: StringLiteral, lexeme: '"string"', literal: string, line: 2}
    }
   }
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'arrayVal', literal: null, line: 2}
    Array {
     Expressions {
      Array {
       Expressions {
        Literal {
         Token{type: BooleanLiteral, lexeme: 'true', literal: true, line: 2}
        }
        Literal {
         Token{type: IntLiteral, lexeme: '2', literal: 2, line: 2}
        }
       }
      }
      Array {
       Expressions {
        Literal {
         Token{type: DoubleLiteral, lexeme: '1.23', literal: 1.23, line: 2}
        }
       }
      }
     }
    }
   }
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'tupleVal', literal: null, line: 2}
    Tuple {
     Tuple list {
      Named element {
       Token{type: Identifier, lexeme: 'x', literal: null, line: 2}
       Literal {
        Token{type: IntLiteral, lexeme: '2', literal: 2, line: 2}
       }
      }
     }
    }
   }
  }
 }
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'funcVal', literal: null, line: 3}
    Function literal {
     Identifiers {
      Token{type: Identifier, lexeme: 'x', literal: null, line: 3}
     }
     Binary Operation {
      Left {
       Reference Tail {
        Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 3}
        Empty Tail {
        }
       }
      }
      Token{type: Plus, lexeme: '+', literal: null, line: 3}
      Right {
       Literal {
        Token{type: IntLiteral, lexeme: '1', literal: 1, line: 3}
       }
      }
     }
    }
   }
  }
 }
 Declarations (identifiers only) {
  Identifiers {
   Token{type: Identifier, lexeme: 'nullVal', literal: null, line: 4}
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'intVal', literal: null, line: 6}
    Empty Tail {
    }
   }
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'realVal', literal: null, line: 6}
    Empty Tail {
    }
   }
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'boolVal', literal: null, line: 6}
    Empty Tail {
    }
   }
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'stringVal', literal: null, line: 7}
    Empty Tail {
    }
   }
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'arrayVal', literal: null, line: 7}
    Empty Tail {
    }
   }
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'tupleVal', literal: null, line: 7}
    Empty Tail {
    }
   }
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'funcVal', literal: null, line: 8}
    Empty Tail {
    }
   }
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'nullVal', literal: null, line: 9}
    Empty Tail {
    }
   }
  }
 }
}
