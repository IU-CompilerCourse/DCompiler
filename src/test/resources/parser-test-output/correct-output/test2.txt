ListNode {
 Multiple Declarations {
  ListNode {
   Declaration {
    Token List {
     Token{type: Identifier, lexeme: 'x', literal: null, line: 1}
    }
    Literal {
     Token{type: IntLiteral, lexeme: '0', literal: 0, line: 1}
    }
   }
  }
 }
 Multiple Declarations {
  ListNode {
   Declaration {
    Token List {
     Token{type: Identifier, lexeme: 'y', literal: null, line: 2}
    }
    Literal {
     Token{type: IntLiteral, lexeme: '10', literal: 10, line: 2}
    }
   }
  }
 }
 If Statement {
  Binary Operation {
   Left {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'y', literal: null, line: 4}
    }
   }
   Token{type: Greater, lexeme: '>', literal: null, line: 4}
   Right {
    Literal {
     Token{type: IntLiteral, lexeme: '5', literal: 5, line: 4}
    }
   }
  }
  ListNode {
   Identifier Assign {
    Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 5}
    Binary Operation {
     Left {
      Reference Tail {
       Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 5}
      }
     }
     Token{type: Plus, lexeme: '+', literal: null, line: 5}
     Right {
      Literal {
       Token{type: IntLiteral, lexeme: '1', literal: 1, line: 5}
      }
     }
    }
   }
  }
  ListNode {
   Identifier Assign {
    Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 7}
    Binary Operation {
     Left {
      Reference Tail {
       Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 7}
      }
     }
     Token{type: Minus, lexeme: '-', literal: null, line: 7}
     Right {
      Literal {
       Token{type: IntLiteral, lexeme: '1', literal: 1, line: 7}
      }
     }
    }
   }
  }
 }
 While {
  Binary Operation {
   Left {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 10}
    }
   }
   Token{type: Less, lexeme: '<', literal: null, line: 10}
   Right {
    Literal {
     Token{type: IntLiteral, lexeme: '5', literal: 5, line: 10}
    }
   }
  }
  Loop Body {
   ListNode {
    Identifier Assign {
     Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 11}
     Binary Operation {
      Left {
       Reference Tail {
        Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 11}
       }
      }
      Token{type: Plus, lexeme: '+', literal: null, line: 11}
      Right {
       Literal {
        Token{type: IntLiteral, lexeme: '1', literal: 1, line: 11}
       }
      }
     }
    }
   }
  }
 }
 Print {
  ListNode {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'x', literal: null, line: 14}
   }
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'y', literal: null, line: 14}
   }
  }
 }
}
