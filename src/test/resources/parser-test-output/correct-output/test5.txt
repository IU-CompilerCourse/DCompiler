Statements {
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 1}
    Literal {
     Token{type: IntLiteral, lexeme: '10', literal: 10, line: 1}
    }
   }
  }
 }
 If {
  Comparison Operation {
   Left {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 3}
     Empty Tail {
     }
    }
   }
   Token{type: Greater, lexeme: '>', literal: null, line: 3}
   Right {
    Literal {
     Token{type: IntLiteral, lexeme: '5', literal: 5, line: 3}
    }
   }
  }
  Statements {
   Declarations with values {
    Declarations {
     Identifier with value {
      Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 4}
      Literal {
       Token{type: IntLiteral, lexeme: '20', literal: 20, line: 4}
      }
     }
    }
   }
   Print {
    Expressions {
     Reference Tail {
      Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 5}
      Empty Tail {
      }
     }
    }
   }
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 8}
    Empty Tail {
    }
   }
  }
 }
 While {
  Comparison Operation {
   Left {
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 10}
     Empty Tail {
     }
    }
   }
   Token{type: Less, lexeme: '<', literal: null, line: 10}
   Right {
    Literal {
     Token{type: IntLiteral, lexeme: '15', literal: 15, line: 10}
    }
   }
  }
  Loop Body {
   Statements {
    Declarations with values {
     Declarations {
      Identifier with value {
       Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 11}
       Binary Operation {
        Left {
         Reference Tail {
          Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 11}
          Empty Tail {
          }
         }
        }
        Token{type: Plus, lexeme: '+', literal: null, line: 11}
        Right {
         Literal {
          Token{type: IntLiteral, lexeme: '1', literal: 1, line: 11}
         }
        }
       }
      }
     }
    }
    Print {
     Expressions {
      Reference Tail {
       Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 12}
       Empty Tail {
       }
      }
     }
    }
   }
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'a', literal: null, line: 15}
    Empty Tail {
    }
   }
  }
 }
}
