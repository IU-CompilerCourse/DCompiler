Statements {
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'factorial', literal: null, line: 2}
    Function literal {
     Identifiers {
      Token{type: Identifier, lexeme: 'n', literal: null, line: 2}
     }
     Statements {
      If {
       Logical Operation {
        Left {
         Comparison Operation {
          Left {
           Reference Tail {
            Identifier Token{type: Identifier, lexeme: 'n', literal: null, line: 3}
            Empty Tail {
            }
           }
          }
          Token{type: Equal, lexeme: '=', literal: null, line: 3}
          Right {
           Literal {
            Token{type: IntLiteral, lexeme: '0', literal: 0, line: 3}
           }
          }
         }
        }
        Token{type: Or, lexeme: 'or', literal: null, line: 3}
        Right {
         Comparison Operation {
          Left {
           Reference Tail {
            Identifier Token{type: Identifier, lexeme: 'n', literal: null, line: 3}
            Empty Tail {
            }
           }
          }
          Token{type: Equal, lexeme: '=', literal: null, line: 3}
          Right {
           Literal {
            Token{type: IntLiteral, lexeme: '1', literal: 1, line: 3}
           }
          }
         }
        }
       }
       Statements {
        Return {
         Literal {
          Token{type: IntLiteral, lexeme: '1', literal: 1, line: 4}
         }
        }
       }
       Statements {
        Return {
         Binary Operation {
          Left {
           Reference Tail {
            Identifier Token{type: Identifier, lexeme: 'n', literal: null, line: 6}
            Empty Tail {
            }
           }
          }
          Token{type: Star, lexeme: '*', literal: null, line: 6}
          Right {
           Reference Tail {
            Identifier Token{type: Identifier, lexeme: 'factorial', literal: null, line: 6}
            Tail {
             Function call {
              Expressions {
               Binary Operation {
                Left {
                 Reference Tail {
                  Identifier Token{type: Identifier, lexeme: 'n', literal: null, line: 6}
                  Empty Tail {
                  }
                 }
                }
                Token{type: Minus, lexeme: '-', literal: null, line: 6}
                Right {
                 Literal {
                  Token{type: IntLiteral, lexeme: '1', literal: 1, line: 6}
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 Declarations with values {
  Declarations {
   Identifier with value {
    Identifier Token{type: Identifier, lexeme: 'factResult', literal: null, line: 10}
    Reference Tail {
     Identifier Token{type: Identifier, lexeme: 'factorial', literal: null, line: 10}
     Tail {
      Function call {
       Expressions {
        Literal {
         Token{type: IntLiteral, lexeme: '5', literal: 5, line: 10}
        }
       }
      }
     }
    }
   }
  }
 }
 Print {
  Expressions {
   Reference Tail {
    Identifier Token{type: Identifier, lexeme: 'factResult', literal: null, line: 12}
    Empty Tail {
    }
   }
  }
 }
}
