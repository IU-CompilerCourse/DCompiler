TOKENS

Token{type: Var, lexeme: 'var', literal: null, line: 1}
Token{type: Identifier, lexeme: 'arr', literal: null, line: 1}
Token{type: Assignment, lexeme: ':=', literal: null, line: 1}
Token{type: OpenBracket, lexeme: '[', literal: null, line: 1}
Token{type: IntLiteral, lexeme: '1', literal: 1, line: 1}
Token{type: Comma, lexeme: ',', literal: null, line: 1}
Token{type: IntLiteral, lexeme: '2', literal: 2, line: 1}
Token{type: Comma, lexeme: ',', literal: null, line: 1}
Token{type: IntLiteral, lexeme: '3', literal: 3, line: 1}
Token{type: CloseBracket, lexeme: ']', literal: null, line: 1}
Token{type: Semicolon, lexeme: ';', literal: null, line: 1}
Token{type: Var, lexeme: 'var', literal: null, line: 2}
Token{type: Identifier, lexeme: 'tup', literal: null, line: 2}
Token{type: Assignment, lexeme: ':=', literal: null, line: 2}
Token{type: OpenBrace, lexeme: '{', literal: null, line: 2}
Token{type: Identifier, lexeme: 'a', literal: null, line: 2}
Token{type: Assignment, lexeme: ':=', literal: null, line: 2}
Token{type: IntLiteral, lexeme: '5', literal: 5, line: 2}
Token{type: Comma, lexeme: ',', literal: null, line: 2}
Token{type: Identifier, lexeme: 'b', literal: null, line: 2}
Token{type: Assignment, lexeme: ':=', literal: null, line: 2}
Token{type: StringLiteral, lexeme: '"test"', literal: test, line: 2}
Token{type: CloseBrace, lexeme: '}', literal: null, line: 2}
Token{type: Semicolon, lexeme: ';', literal: null, line: 2}
Token{type: Identifier, lexeme: 'arr', literal: null, line: 4}
Token{type: OpenBracket, lexeme: '[', literal: null, line: 4}
Token{type: IntLiteral, lexeme: '4', literal: 4, line: 4}
Token{type: CloseBracket, lexeme: ']', literal: null, line: 4}
Token{type: Assignment, lexeme: ':=', literal: null, line: 4}
Token{type: IntLiteral, lexeme: '4', literal: 4, line: 4}
Token{type: Semicolon, lexeme: ';', literal: null, line: 4}
Token{type: Identifier, lexeme: 'tup', literal: null, line: 5}
Token{type: Assignment, lexeme: ':=', literal: null, line: 5}
Token{type: Identifier, lexeme: 'tup', literal: null, line: 5}
Token{type: Plus, lexeme: '+', literal: null, line: 5}
Token{type: OpenBrace, lexeme: '{', literal: null, line: 5}
Token{type: Identifier, lexeme: 'c', literal: null, line: 5}
Token{type: Assignment, lexeme: ':=', literal: null, line: 5}
Token{type: BooleanLiteral, lexeme: 'true', literal: true, line: 5}
Token{type: CloseBrace, lexeme: '}', literal: null, line: 5}
Token{type: Semicolon, lexeme: ';', literal: null, line: 5}
Token{type: Var, lexeme: 'var', literal: null, line: 7}
Token{type: Identifier, lexeme: 'val1', literal: null, line: 7}
Token{type: Assignment, lexeme: ':=', literal: null, line: 7}
Token{type: Identifier, lexeme: 'arr', literal: null, line: 7}
Token{type: OpenBracket, lexeme: '[', literal: null, line: 7}
Token{type: IntLiteral, lexeme: '4', literal: 4, line: 7}
Token{type: CloseBracket, lexeme: ']', literal: null, line: 7}
Token{type: Semicolon, lexeme: ';', literal: null, line: 7}
Token{type: Var, lexeme: 'var', literal: null, line: 8}
Token{type: Identifier, lexeme: 'val2', literal: null, line: 8}
Token{type: Assignment, lexeme: ':=', literal: null, line: 8}
Token{type: Identifier, lexeme: 'tup', literal: null, line: 8}
Token{type: Dot, lexeme: '.', literal: null, line: 8}
Token{type: Identifier, lexeme: 'c', literal: null, line: 8}
Token{type: Semicolon, lexeme: ';', literal: null, line: 8}
Token{type: Print, lexeme: 'print', literal: null, line: 10}
Token{type: Identifier, lexeme: 'val1', literal: null, line: 10}
Token{type: Comma, lexeme: ',', literal: null, line: 10}
Token{type: Identifier, lexeme: 'val2', literal: null, line: 10}
Token{type: Semicolon, lexeme: ';', literal: null, line: 10}
Token{type: EOF, lexeme: '', literal: null, line: 11}

ERRORS

