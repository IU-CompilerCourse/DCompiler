TOKENS

Token{type: Var, lexeme: 'var', literal: null, line: 2}
Token{type: Identifier, lexeme: 'factorial', literal: null, line: 2}
Token{type: Assignment, lexeme: ':=', literal: null, line: 2}
Token{type: Func, lexeme: 'func', literal: null, line: 2}
Token{type: OpenParen, lexeme: '(', literal: null, line: 2}
Token{type: Identifier, lexeme: 'n', literal: null, line: 2}
Token{type: CloseParen, lexeme: ')', literal: null, line: 2}
Token{type: Is, lexeme: 'is', literal: null, line: 2}
Token{type: If, lexeme: 'if', literal: null, line: 3}
Token{type: Identifier, lexeme: 'n', literal: null, line: 3}
Token{type: Equal, lexeme: '=', literal: null, line: 3}
Token{type: IntLiteral, lexeme: '0', literal: 0, line: 3}
Token{type: Or, lexeme: 'or', literal: null, line: 3}
Token{type: Identifier, lexeme: 'n', literal: null, line: 3}
Token{type: Equal, lexeme: '=', literal: null, line: 3}
Token{type: IntLiteral, lexeme: '1', literal: 1, line: 3}
Token{type: Then, lexeme: 'then', literal: null, line: 3}
Token{type: Return, lexeme: 'return', literal: null, line: 4}
Token{type: IntLiteral, lexeme: '1', literal: 1, line: 4}
Token{type: Semicolon, lexeme: ';', literal: null, line: 4}
Token{type: Else, lexeme: 'else', literal: null, line: 5}
Token{type: Return, lexeme: 'return', literal: null, line: 6}
Token{type: Identifier, lexeme: 'n', literal: null, line: 6}
Token{type: Star, lexeme: '*', literal: null, line: 6}
Token{type: Identifier, lexeme: 'factorial', literal: null, line: 6}
Token{type: OpenParen, lexeme: '(', literal: null, line: 6}
Token{type: Identifier, lexeme: 'n', literal: null, line: 6}
Token{type: Minus, lexeme: '-', literal: null, line: 6}
Token{type: IntLiteral, lexeme: '1', literal: 1, line: 6}
Token{type: CloseParen, lexeme: ')', literal: null, line: 6}
Token{type: Semicolon, lexeme: ';', literal: null, line: 6}
Token{type: End, lexeme: 'end', literal: null, line: 7}
Token{type: End, lexeme: 'end', literal: null, line: 8}
Token{type: Semicolon, lexeme: ';', literal: null, line: 8}
Token{type: Var, lexeme: 'var', literal: null, line: 10}
Token{type: Identifier, lexeme: 'factResult', literal: null, line: 10}
Token{type: Assignment, lexeme: ':=', literal: null, line: 10}
Token{type: Identifier, lexeme: 'factorial', literal: null, line: 10}
Token{type: OpenParen, lexeme: '(', literal: null, line: 10}
Token{type: IntLiteral, lexeme: '5', literal: 5, line: 10}
Token{type: CloseParen, lexeme: ')', literal: null, line: 10}
Token{type: Semicolon, lexeme: ';', literal: null, line: 10}
Token{type: Print, lexeme: 'print', literal: null, line: 12}
Token{type: Identifier, lexeme: 'factResult', literal: null, line: 12}
Token{type: Semicolon, lexeme: ';', literal: null, line: 12}
Token{type: EOF, lexeme: '', literal: null, line: 13}

ERRORS

